#pragma once

//this file is auto generated by (hbpex)[https://github.com/jj4jj/hpbex.git] , don't edit this file !
//file generate datetime: Mon Dec  7 19:53:37 2015

#include <algorithm>
#include "comm.hpb.h"
#include "db.pb.h"

namespace db { 


struct DBTest_ST {
    uint64_t		role_id;
    uint32_t		seq;
    CommBase_ST		base;
    	
    //////////////member functions///////////////////////////////////
    void		construct() {
        if(sizeof(*this) < 1024) { memset(this,0,sizeof(*this)); return ;}
        role_id = 0;
        seq = 0;
        base.construct();
    }
    void		convto(DBTest & convtomsg_) const {
        convtomsg_.set_role_id(role_id);
        convtomsg_.set_seq(seq);
        base.convto(*convtomsg_.mutable_base());
    }
    void		convfrom(const DBTest & convfrommsg_) {
        role_id = convfrommsg_.role_id();
        seq = convfrommsg_.seq();
        base.convfrom(convfrommsg_.base());
    }
    int		compare(const DBTest_ST & rhs_) const {
        int _cmp_ret = 0;
        _cmp_ret = (role_id < rhs_.role_id) ? -1 : ((role_id == rhs_.role_id) ? 0 : 1);
        if (_cmp_ret != 0) { return _cmp_ret; }
        return 0;
    }
    bool		operator == (const DBTest_ST & rhs_) const {
        return this->compare(rhs_) == 0;
    }
    bool		operator < (const DBTest_ST & rhs_) const {
        return this->compare(rhs_) < 0;
    }
};

} // end of namespace: db

