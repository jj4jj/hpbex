// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mm.proto

#ifndef PROTOBUF_mm_2eproto__INCLUDED
#define PROTOBUF_mm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "extensions.pb.h"
#include "comm.pb.h"
#include "db.pb.h"
// @@protoc_insertion_point(includes)

namespace mm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mm_2eproto();
void protobuf_AssignDesc_mm_2eproto();
void protobuf_ShutdownFile_mm_2eproto();

class PK;
class Hero;

enum ConstValueDef {
  MAX_PK_COUNT = 30
};
bool ConstValueDef_IsValid(int value);
const ConstValueDef ConstValueDef_MIN = MAX_PK_COUNT;
const ConstValueDef ConstValueDef_MAX = MAX_PK_COUNT;
const int ConstValueDef_ARRAYSIZE = ConstValueDef_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConstValueDef_descriptor();
inline const ::std::string& ConstValueDef_Name(ConstValueDef value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConstValueDef_descriptor(), value);
}
inline bool ConstValueDef_Parse(
    const ::std::string& name, ConstValueDef* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConstValueDef>(
    ConstValueDef_descriptor(), name, value);
}
// ===================================================================

class PK : public ::google::protobuf::Message {
 public:
  PK();
  virtual ~PK();

  PK(const PK& from);

  inline PK& operator=(const PK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PK& default_instance();

  void Swap(PK* other);

  // implements Message ----------------------------------------------

  PK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PK& from);
  void MergeFrom(const PK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .db.DBTest db = 2;
  inline bool has_db() const;
  inline void clear_db();
  static const int kDbFieldNumber = 2;
  inline const ::db::DBTest& db() const;
  inline ::db::DBTest* mutable_db();
  inline ::db::DBTest* release_db();
  inline void set_allocated_db(::db::DBTest* db);

  // @@protoc_insertion_point(class_scope:mm.PK)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_db();
  inline void clear_has_db();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::db::DBTest* db_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_mm_2eproto();
  friend void protobuf_AssignDesc_mm_2eproto();
  friend void protobuf_ShutdownFile_mm_2eproto();

  void InitAsDefaultInstance();
  static PK* default_instance_;
};
// -------------------------------------------------------------------

class Hero : public ::google::protobuf::Message {
 public:
  Hero();
  virtual ~Hero();

  Hero(const Hero& from);

  inline Hero& operator=(const Hero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Hero& default_instance();

  void Swap(Hero* other);

  // implements Message ----------------------------------------------

  Hero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Hero& from);
  void MergeFrom(const Hero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .CommBase base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::CommBase& base() const;
  inline ::CommBase* mutable_base();
  inline ::CommBase* release_base();
  inline void set_allocated_base(::CommBase* base);

  // repeated int32 id_list = 2;
  inline int id_list_size() const;
  inline void clear_id_list();
  static const int kIdListFieldNumber = 2;
  inline ::google::protobuf::int32 id_list(int index) const;
  inline void set_id_list(int index, ::google::protobuf::int32 value);
  inline void add_id_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id_list();

  // repeated .mm.PK pk_list = 3;
  inline int pk_list_size() const;
  inline void clear_pk_list();
  static const int kPkListFieldNumber = 3;
  inline const ::mm::PK& pk_list(int index) const;
  inline ::mm::PK* mutable_pk_list(int index);
  inline ::mm::PK* add_pk_list();
  inline const ::google::protobuf::RepeatedPtrField< ::mm::PK >&
      pk_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::mm::PK >*
      mutable_pk_list();

  // required string str = 5;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 5;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // optional float f32 = 6;
  inline bool has_f32() const;
  inline void clear_f32();
  static const int kF32FieldNumber = 6;
  inline float f32() const;
  inline void set_f32(float value);

  // @@protoc_insertion_point(class_scope:mm.Hero)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_f32();
  inline void clear_has_f32();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CommBase* base_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_list_;
  ::google::protobuf::int32 id_;
  float f32_;
  ::google::protobuf::RepeatedPtrField< ::mm::PK > pk_list_;
  ::std::string* str_;
  friend void  protobuf_AddDesc_mm_2eproto();
  friend void protobuf_AssignDesc_mm_2eproto();
  friend void protobuf_ShutdownFile_mm_2eproto();

  void InitAsDefaultInstance();
  static Hero* default_instance_;
};
// ===================================================================


// ===================================================================

// PK

// required int32 id = 1;
inline bool PK::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PK::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PK::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PK::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PK::id() const {
  // @@protoc_insertion_point(field_get:mm.PK.id)
  return id_;
}
inline void PK::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mm.PK.id)
}

// optional .db.DBTest db = 2;
inline bool PK::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PK::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PK::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PK::clear_db() {
  if (db_ != NULL) db_->::db::DBTest::Clear();
  clear_has_db();
}
inline const ::db::DBTest& PK::db() const {
  // @@protoc_insertion_point(field_get:mm.PK.db)
  return db_ != NULL ? *db_ : *default_instance_->db_;
}
inline ::db::DBTest* PK::mutable_db() {
  set_has_db();
  if (db_ == NULL) db_ = new ::db::DBTest;
  // @@protoc_insertion_point(field_mutable:mm.PK.db)
  return db_;
}
inline ::db::DBTest* PK::release_db() {
  clear_has_db();
  ::db::DBTest* temp = db_;
  db_ = NULL;
  return temp;
}
inline void PK::set_allocated_db(::db::DBTest* db) {
  delete db_;
  db_ = db;
  if (db) {
    set_has_db();
  } else {
    clear_has_db();
  }
  // @@protoc_insertion_point(field_set_allocated:mm.PK.db)
}

// -------------------------------------------------------------------

// Hero

// required int32 id = 4;
inline bool Hero::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Hero::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Hero::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Hero::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Hero::id() const {
  // @@protoc_insertion_point(field_get:mm.Hero.id)
  return id_;
}
inline void Hero::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mm.Hero.id)
}

// required .CommBase base = 1;
inline bool Hero::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Hero::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Hero::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Hero::clear_base() {
  if (base_ != NULL) base_->::CommBase::Clear();
  clear_has_base();
}
inline const ::CommBase& Hero::base() const {
  // @@protoc_insertion_point(field_get:mm.Hero.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::CommBase* Hero::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::CommBase;
  // @@protoc_insertion_point(field_mutable:mm.Hero.base)
  return base_;
}
inline ::CommBase* Hero::release_base() {
  clear_has_base();
  ::CommBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline void Hero::set_allocated_base(::CommBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:mm.Hero.base)
}

// repeated int32 id_list = 2;
inline int Hero::id_list_size() const {
  return id_list_.size();
}
inline void Hero::clear_id_list() {
  id_list_.Clear();
}
inline ::google::protobuf::int32 Hero::id_list(int index) const {
  // @@protoc_insertion_point(field_get:mm.Hero.id_list)
  return id_list_.Get(index);
}
inline void Hero::set_id_list(int index, ::google::protobuf::int32 value) {
  id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:mm.Hero.id_list)
}
inline void Hero::add_id_list(::google::protobuf::int32 value) {
  id_list_.Add(value);
  // @@protoc_insertion_point(field_add:mm.Hero.id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Hero::id_list() const {
  // @@protoc_insertion_point(field_list:mm.Hero.id_list)
  return id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Hero::mutable_id_list() {
  // @@protoc_insertion_point(field_mutable_list:mm.Hero.id_list)
  return &id_list_;
}

// repeated .mm.PK pk_list = 3;
inline int Hero::pk_list_size() const {
  return pk_list_.size();
}
inline void Hero::clear_pk_list() {
  pk_list_.Clear();
}
inline const ::mm::PK& Hero::pk_list(int index) const {
  // @@protoc_insertion_point(field_get:mm.Hero.pk_list)
  return pk_list_.Get(index);
}
inline ::mm::PK* Hero::mutable_pk_list(int index) {
  // @@protoc_insertion_point(field_mutable:mm.Hero.pk_list)
  return pk_list_.Mutable(index);
}
inline ::mm::PK* Hero::add_pk_list() {
  // @@protoc_insertion_point(field_add:mm.Hero.pk_list)
  return pk_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mm::PK >&
Hero::pk_list() const {
  // @@protoc_insertion_point(field_list:mm.Hero.pk_list)
  return pk_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::mm::PK >*
Hero::mutable_pk_list() {
  // @@protoc_insertion_point(field_mutable_list:mm.Hero.pk_list)
  return &pk_list_;
}

// required string str = 5;
inline bool Hero::has_str() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Hero::set_has_str() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Hero::clear_has_str() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Hero::clear_str() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& Hero::str() const {
  // @@protoc_insertion_point(field_get:mm.Hero.str)
  return *str_;
}
inline void Hero::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set:mm.Hero.str)
}
inline void Hero::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set_char:mm.Hero.str)
}
inline void Hero::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mm.Hero.str)
}
inline ::std::string* Hero::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mm.Hero.str)
  return str_;
}
inline ::std::string* Hero::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Hero::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mm.Hero.str)
}

// optional float f32 = 6;
inline bool Hero::has_f32() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Hero::set_has_f32() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Hero::clear_has_f32() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Hero::clear_f32() {
  f32_ = 0;
  clear_has_f32();
}
inline float Hero::f32() const {
  // @@protoc_insertion_point(field_get:mm.Hero.f32)
  return f32_;
}
inline void Hero::set_f32(float value) {
  set_has_f32();
  f32_ = value;
  // @@protoc_insertion_point(field_set:mm.Hero.f32)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mm

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mm::ConstValueDef> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mm::ConstValueDef>() {
  return ::mm::ConstValueDef_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mm_2eproto__INCLUDED
