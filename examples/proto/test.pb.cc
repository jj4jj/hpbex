// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* HelloA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloA_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelloB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloB_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelloC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloC_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelloD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloD_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hello_reflection_ = NULL;
const ::google::protobuf::Descriptor* Award_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Award_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBHello_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumDef_value_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2eproto() {
  protobuf_AddDesc_test_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test.proto");
  GOOGLE_CHECK(file != NULL);
  HelloA_descriptor_ = file->message_type(0);
  static const int HelloA_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloA, f1_),
  };
  HelloA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelloA_descriptor_,
      HelloA::default_instance_,
      HelloA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelloA));
  HelloB_descriptor_ = file->message_type(1);
  static const int HelloB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloB, f1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloB, a_),
  };
  HelloB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelloB_descriptor_,
      HelloB::default_instance_,
      HelloB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelloB));
  HelloC_descriptor_ = file->message_type(2);
  static const int HelloC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloC, f1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloC, b_),
  };
  HelloC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelloC_descriptor_,
      HelloC::default_instance_,
      HelloC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelloC));
  HelloD_descriptor_ = file->message_type(3);
  static const int HelloD_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloD, f1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloD, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloD, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloD, d_),
  };
  HelloD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelloD_descriptor_,
      HelloD::default_instance_,
      HelloD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelloD));
  Hello_descriptor_ = file->message_type(4);
  static const int Hello_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, myworld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, ev_),
  };
  Hello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hello_descriptor_,
      Hello::default_instance_,
      Hello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hello));
  Award_descriptor_ = file->message_type(5);
  static const int Award_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Award, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Award, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Award, param_),
  };
  Award_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Award_descriptor_,
      Award::default_instance_,
      Award_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Award, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Award, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Award));
  DBHello_descriptor_ = file->message_type(6);
  static const int DBHello_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHello, pk1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHello, pk2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHello, f1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHello, f2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHello, hello_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHello, b4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHello, bytesmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHello, repeat_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHello, repeat_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHello, ev_),
  };
  DBHello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBHello_descriptor_,
      DBHello::default_instance_,
      DBHello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBHello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBHello));
  EnumDef_value_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelloA_descriptor_, &HelloA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelloB_descriptor_, &HelloB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelloC_descriptor_, &HelloC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelloD_descriptor_, &HelloD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hello_descriptor_, &Hello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Award_descriptor_, &Award::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBHello_descriptor_, &DBHello::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2eproto() {
  delete HelloA::default_instance_;
  delete HelloA_reflection_;
  delete HelloB::default_instance_;
  delete HelloB_reflection_;
  delete HelloC::default_instance_;
  delete HelloC_reflection_;
  delete HelloD::default_instance_;
  delete HelloD_reflection_;
  delete Hello::default_instance_;
  delete Hello_reflection_;
  delete Award::default_instance_;
  delete Award_reflection_;
  delete DBHello::default_instance_;
  delete DBHello_reflection_;
}

void protobuf_AddDesc_test_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_extensions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntest.proto\032\020extensions.proto\"\024\n\006HelloA"
    "\022\n\n\002f1\030\001 \001(\005\"(\n\006HelloB\022\n\n\002f1\030\001 \001(\005\022\022\n\001a\030"
    "\002 \001(\0132\007.HelloA\"(\n\006HelloC\022\n\n\002f1\030\001 \001(\005\022\022\n\001"
    "b\030\002 \001(\0132\007.HelloB\"\\\n\006HelloD\022\n\n\002f1\030\001 \001(\005\022\022"
    "\n\001b\030\002 \001(\0132\007.HelloB\022\022\n\001c\030\003 \001(\0132\007.HelloC\022\026"
    "\n\001d\030\004 \003(\014B\013\232\265\030\00220\222\265\030\0015:\006\202\265\030\002f1\"\224\001\n\005Hello"
    "\022\030\n\002id\030\001 \001(\005B\014\202\265\030\002id\212\265\030\002id\022\035\n\007myworld\030\002 "
    "\003(\tB\014\232\265\030\00232\222\265\030\00232\022\022\n\001d\030\004 \001(\0132\007.HelloD\022\032\n"
    "\002ev\030\n \001(\0162\016.EnumDef_value:\"\232\265\030\004ssss\242\265\030\014h"
    "ello, world\252\265\030\000\202\265\030\002id\"/\n\005Award\022\n\n\002id\030\001 \001"
    "(\r\022\013\n\003num\030\002 \001(\r\022\r\n\005param\030\003 \001(\r\"\223\002\n\007DBHel"
    "lo\022\013\n\003pk1\030\001 \002(\004\022 \n\003pk2\030\002 \002(\tB\023\232\265\030\017MAX_NA"
    "ME_LENGTH\022\n\n\002f1\030\003 \001(\r\022\022\n\002f2\030\004 \001(\tB\006\232\265\030\0023"
    "2\022\025\n\005hello\030\005 \001(\0132\006.Hello\022\n\n\002b4\030\006 \001(\010\022\"\n\010"
    "bytesmsg\030\007 \001(\014B\020\232\265\030\014MAX_BUFF_NUM\022\033\n\013repe"
    "at_test\030\010 \003(\rB\006\222\265\030\00232\022!\n\nrepeat_msg\030\t \003("
    "\0132\006.AwardB\005\222\265\030\0015\022\032\n\002ev\030\n \001(\0162\016.EnumDef_v"
    "alue:\026\202\265\030\007pk1,pk2\212\265\030\003pk1\220\265\030d*d\n\rEnumDef_"
    "value\022\024\n\020EN_DEFAULT_VALUE\020\000\022\023\n\017MAX_NAME_"
    "LENGTH\020\001\022\024\n\020MAX_DB_SPLIT_NUM\020d\022\022\n\014MAX_BU"
    "FF_NUM\020\200\200@", 810);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
  HelloA::default_instance_ = new HelloA();
  HelloB::default_instance_ = new HelloB();
  HelloC::default_instance_ = new HelloC();
  HelloD::default_instance_ = new HelloD();
  Hello::default_instance_ = new Hello();
  Award::default_instance_ = new Award();
  DBHello::default_instance_ = new DBHello();
  HelloA::default_instance_->InitAsDefaultInstance();
  HelloB::default_instance_->InitAsDefaultInstance();
  HelloC::default_instance_->InitAsDefaultInstance();
  HelloD::default_instance_->InitAsDefaultInstance();
  Hello::default_instance_->InitAsDefaultInstance();
  Award::default_instance_->InitAsDefaultInstance();
  DBHello::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2eproto {
  StaticDescriptorInitializer_test_2eproto() {
    protobuf_AddDesc_test_2eproto();
  }
} static_descriptor_initializer_test_2eproto_;
const ::google::protobuf::EnumDescriptor* EnumDef_value_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumDef_value_descriptor_;
}
bool EnumDef_value_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 100:
    case 1048576:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int HelloA::kF1FieldNumber;
#endif  // !_MSC_VER

HelloA::HelloA()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HelloA)
}

void HelloA::InitAsDefaultInstance() {
}

HelloA::HelloA(const HelloA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HelloA)
}

void HelloA::SharedCtor() {
  _cached_size_ = 0;
  f1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloA::~HelloA() {
  // @@protoc_insertion_point(destructor:HelloA)
  SharedDtor();
}

void HelloA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HelloA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloA_descriptor_;
}

const HelloA& HelloA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

HelloA* HelloA::default_instance_ = NULL;

HelloA* HelloA::New() const {
  return new HelloA;
}

void HelloA::Clear() {
  f1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelloA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HelloA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f1_)));
          set_has_f1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HelloA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HelloA)
  return false;
#undef DO_
}

void HelloA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HelloA)
  // optional int32 f1 = 1;
  if (has_f1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HelloA)
}

::google::protobuf::uint8* HelloA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HelloA)
  // optional int32 f1 = 1;
  if (has_f1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HelloA)
  return target;
}

int HelloA::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f1 = 1;
    if (has_f1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelloA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelloA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelloA::MergeFrom(const HelloA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f1()) {
      set_f1(from.f1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelloA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloA::CopyFrom(const HelloA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloA::IsInitialized() const {

  return true;
}

void HelloA::Swap(HelloA* other) {
  if (other != this) {
    std::swap(f1_, other->f1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelloA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloA_descriptor_;
  metadata.reflection = HelloA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HelloB::kF1FieldNumber;
const int HelloB::kAFieldNumber;
#endif  // !_MSC_VER

HelloB::HelloB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HelloB)
}

void HelloB::InitAsDefaultInstance() {
  a_ = const_cast< ::HelloA*>(&::HelloA::default_instance());
}

HelloB::HelloB(const HelloB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HelloB)
}

void HelloB::SharedCtor() {
  _cached_size_ = 0;
  f1_ = 0;
  a_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloB::~HelloB() {
  // @@protoc_insertion_point(destructor:HelloB)
  SharedDtor();
}

void HelloB::SharedDtor() {
  if (this != default_instance_) {
    delete a_;
  }
}

void HelloB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloB_descriptor_;
}

const HelloB& HelloB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

HelloB* HelloB::default_instance_ = NULL;

HelloB* HelloB::New() const {
  return new HelloB;
}

void HelloB::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    f1_ = 0;
    if (has_a()) {
      if (a_ != NULL) a_->::HelloA::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelloB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HelloB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f1_)));
          set_has_f1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_a;
        break;
      }

      // optional .HelloA a = 2;
      case 2: {
        if (tag == 18) {
         parse_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HelloB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HelloB)
  return false;
#undef DO_
}

void HelloB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HelloB)
  // optional int32 f1 = 1;
  if (has_f1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f1(), output);
  }

  // optional .HelloA a = 2;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->a(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HelloB)
}

::google::protobuf::uint8* HelloB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HelloB)
  // optional int32 f1 = 1;
  if (has_f1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f1(), target);
  }

  // optional .HelloA a = 2;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->a(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HelloB)
  return target;
}

int HelloB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f1 = 1;
    if (has_f1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f1());
    }

    // optional .HelloA a = 2;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->a());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelloB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelloB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelloB::MergeFrom(const HelloB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f1()) {
      set_f1(from.f1());
    }
    if (from.has_a()) {
      mutable_a()->::HelloA::MergeFrom(from.a());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelloB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloB::CopyFrom(const HelloB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloB::IsInitialized() const {

  return true;
}

void HelloB::Swap(HelloB* other) {
  if (other != this) {
    std::swap(f1_, other->f1_);
    std::swap(a_, other->a_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelloB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloB_descriptor_;
  metadata.reflection = HelloB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HelloC::kF1FieldNumber;
const int HelloC::kBFieldNumber;
#endif  // !_MSC_VER

HelloC::HelloC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HelloC)
}

void HelloC::InitAsDefaultInstance() {
  b_ = const_cast< ::HelloB*>(&::HelloB::default_instance());
}

HelloC::HelloC(const HelloC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HelloC)
}

void HelloC::SharedCtor() {
  _cached_size_ = 0;
  f1_ = 0;
  b_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloC::~HelloC() {
  // @@protoc_insertion_point(destructor:HelloC)
  SharedDtor();
}

void HelloC::SharedDtor() {
  if (this != default_instance_) {
    delete b_;
  }
}

void HelloC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloC_descriptor_;
}

const HelloC& HelloC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

HelloC* HelloC::default_instance_ = NULL;

HelloC* HelloC::New() const {
  return new HelloC;
}

void HelloC::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    f1_ = 0;
    if (has_b()) {
      if (b_ != NULL) b_->::HelloB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelloC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HelloC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f1_)));
          set_has_f1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_b;
        break;
      }

      // optional .HelloB b = 2;
      case 2: {
        if (tag == 18) {
         parse_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HelloC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HelloC)
  return false;
#undef DO_
}

void HelloC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HelloC)
  // optional int32 f1 = 1;
  if (has_f1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f1(), output);
  }

  // optional .HelloB b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HelloC)
}

::google::protobuf::uint8* HelloC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HelloC)
  // optional int32 f1 = 1;
  if (has_f1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f1(), target);
  }

  // optional .HelloB b = 2;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HelloC)
  return target;
}

int HelloC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f1 = 1;
    if (has_f1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f1());
    }

    // optional .HelloB b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelloC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelloC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelloC::MergeFrom(const HelloC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f1()) {
      set_f1(from.f1());
    }
    if (from.has_b()) {
      mutable_b()->::HelloB::MergeFrom(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelloC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloC::CopyFrom(const HelloC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloC::IsInitialized() const {

  return true;
}

void HelloC::Swap(HelloC* other) {
  if (other != this) {
    std::swap(f1_, other->f1_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelloC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloC_descriptor_;
  metadata.reflection = HelloC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HelloD::kF1FieldNumber;
const int HelloD::kBFieldNumber;
const int HelloD::kCFieldNumber;
const int HelloD::kDFieldNumber;
#endif  // !_MSC_VER

HelloD::HelloD()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HelloD)
}

void HelloD::InitAsDefaultInstance() {
  b_ = const_cast< ::HelloB*>(&::HelloB::default_instance());
  c_ = const_cast< ::HelloC*>(&::HelloC::default_instance());
}

HelloD::HelloD(const HelloD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HelloD)
}

void HelloD::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f1_ = 0;
  b_ = NULL;
  c_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloD::~HelloD() {
  // @@protoc_insertion_point(destructor:HelloD)
  SharedDtor();
}

void HelloD::SharedDtor() {
  if (this != default_instance_) {
    delete b_;
    delete c_;
  }
}

void HelloD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloD_descriptor_;
}

const HelloD& HelloD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

HelloD* HelloD::default_instance_ = NULL;

HelloD* HelloD::New() const {
  return new HelloD;
}

void HelloD::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    f1_ = 0;
    if (has_b()) {
      if (b_ != NULL) b_->::HelloB::Clear();
    }
    if (has_c()) {
      if (c_ != NULL) c_->::HelloC::Clear();
    }
  }
  d_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelloD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HelloD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f1_)));
          set_has_f1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_b;
        break;
      }

      // optional .HelloB b = 2;
      case 2: {
        if (tag == 18) {
         parse_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_c;
        break;
      }

      // optional .HelloC c = 3;
      case 3: {
        if (tag == 26) {
         parse_c:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_c()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_d;
        break;
      }

      // repeated bytes d = 4;
      case 4: {
        if (tag == 34) {
         parse_d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_d;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HelloD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HelloD)
  return false;
#undef DO_
}

void HelloD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HelloD)
  // optional int32 f1 = 1;
  if (has_f1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f1(), output);
  }

  // optional .HelloB b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->b(), output);
  }

  // optional .HelloC c = 3;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->c(), output);
  }

  // repeated bytes d = 4;
  for (int i = 0; i < this->d_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->d(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HelloD)
}

::google::protobuf::uint8* HelloD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HelloD)
  // optional int32 f1 = 1;
  if (has_f1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f1(), target);
  }

  // optional .HelloB b = 2;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->b(), target);
  }

  // optional .HelloC c = 3;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->c(), target);
  }

  // repeated bytes d = 4;
  for (int i = 0; i < this->d_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->d(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HelloD)
  return target;
}

int HelloD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f1 = 1;
    if (has_f1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f1());
    }

    // optional .HelloB b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->b());
    }

    // optional .HelloC c = 3;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->c());
    }

  }
  // repeated bytes d = 4;
  total_size += 1 * this->d_size();
  for (int i = 0; i < this->d_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->d(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelloD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelloD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelloD::MergeFrom(const HelloD& from) {
  GOOGLE_CHECK_NE(&from, this);
  d_.MergeFrom(from.d_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f1()) {
      set_f1(from.f1());
    }
    if (from.has_b()) {
      mutable_b()->::HelloB::MergeFrom(from.b());
    }
    if (from.has_c()) {
      mutable_c()->::HelloC::MergeFrom(from.c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelloD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloD::CopyFrom(const HelloD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloD::IsInitialized() const {

  return true;
}

void HelloD::Swap(HelloD* other) {
  if (other != this) {
    std::swap(f1_, other->f1_);
    std::swap(b_, other->b_);
    std::swap(c_, other->c_);
    d_.Swap(&other->d_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelloD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloD_descriptor_;
  metadata.reflection = HelloD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Hello::kIdFieldNumber;
const int Hello::kMyworldFieldNumber;
const int Hello::kDFieldNumber;
const int Hello::kEvFieldNumber;
#endif  // !_MSC_VER

Hello::Hello()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hello)
}

void Hello::InitAsDefaultInstance() {
  d_ = const_cast< ::HelloD*>(&::HelloD::default_instance());
}

Hello::Hello(const Hello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Hello)
}

void Hello::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  d_ = NULL;
  ev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hello::~Hello() {
  // @@protoc_insertion_point(destructor:Hello)
  SharedDtor();
}

void Hello::SharedDtor() {
  if (this != default_instance_) {
    delete d_;
  }
}

void Hello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hello_descriptor_;
}

const Hello& Hello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

Hello* Hello::default_instance_ = NULL;

Hello* Hello::New() const {
  return new Hello;
}

void Hello::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Hello*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(id_, ev_);
    if (has_d()) {
      if (d_ != NULL) d_->::HelloD::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  myworld_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Hello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_myworld;
        break;
      }

      // repeated string myworld = 2;
      case 2: {
        if (tag == 18) {
         parse_myworld:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_myworld()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->myworld(this->myworld_size() - 1).data(),
            this->myworld(this->myworld_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "myworld");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_myworld;
        if (input->ExpectTag(34)) goto parse_d;
        break;
      }

      // optional .HelloD d = 4;
      case 4: {
        if (tag == 34) {
         parse_d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ev;
        break;
      }

      // optional .EnumDef_value ev = 10;
      case 10: {
        if (tag == 80) {
         parse_ev:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EnumDef_value_IsValid(value)) {
            set_ev(static_cast< ::EnumDef_value >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Hello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Hello)
  return false;
#undef DO_
}

void Hello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Hello)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated string myworld = 2;
  for (int i = 0; i < this->myworld_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->myworld(i).data(), this->myworld(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "myworld");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->myworld(i), output);
  }

  // optional .HelloD d = 4;
  if (has_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->d(), output);
  }

  // optional .EnumDef_value ev = 10;
  if (has_ev()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->ev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Hello)
}

::google::protobuf::uint8* Hello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hello)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated string myworld = 2;
  for (int i = 0; i < this->myworld_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->myworld(i).data(), this->myworld(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "myworld");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->myworld(i), target);
  }

  // optional .HelloD d = 4;
  if (has_d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->d(), target);
  }

  // optional .EnumDef_value ev = 10;
  if (has_ev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->ev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hello)
  return target;
}

int Hello::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .HelloD d = 4;
    if (has_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->d());
    }

    // optional .EnumDef_value ev = 10;
    if (has_ev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ev());
    }

  }
  // repeated string myworld = 2;
  total_size += 1 * this->myworld_size();
  for (int i = 0; i < this->myworld_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->myworld(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hello::MergeFrom(const Hello& from) {
  GOOGLE_CHECK_NE(&from, this);
  myworld_.MergeFrom(from.myworld_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_d()) {
      mutable_d()->::HelloD::MergeFrom(from.d());
    }
    if (from.has_ev()) {
      set_ev(from.ev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hello::CopyFrom(const Hello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hello::IsInitialized() const {

  return true;
}

void Hello::Swap(Hello* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    myworld_.Swap(&other->myworld_);
    std::swap(d_, other->d_);
    std::swap(ev_, other->ev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hello_descriptor_;
  metadata.reflection = Hello_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Award::kIdFieldNumber;
const int Award::kNumFieldNumber;
const int Award::kParamFieldNumber;
#endif  // !_MSC_VER

Award::Award()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Award)
}

void Award::InitAsDefaultInstance() {
}

Award::Award(const Award& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Award)
}

void Award::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  param_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Award::~Award() {
  // @@protoc_insertion_point(destructor:Award)
  SharedDtor();
}

void Award::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Award::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Award::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Award_descriptor_;
}

const Award& Award::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

Award* Award::default_instance_ = NULL;

Award* Award::New() const {
  return new Award;
}

void Award::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Award*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, param_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Award::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Award)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_param;
        break;
      }

      // optional uint32 param = 3;
      case 3: {
        if (tag == 24) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Award)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Award)
  return false;
#undef DO_
}

void Award::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Award)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint32 param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Award)
}

::google::protobuf::uint8* Award::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Award)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint32 param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Award)
  return target;
}

int Award::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Award::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Award* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Award*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Award::MergeFrom(const Award& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Award::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Award::CopyFrom(const Award& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Award::IsInitialized() const {

  return true;
}

void Award::Swap(Award* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Award::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Award_descriptor_;
  metadata.reflection = Award_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBHello::kPk1FieldNumber;
const int DBHello::kPk2FieldNumber;
const int DBHello::kF1FieldNumber;
const int DBHello::kF2FieldNumber;
const int DBHello::kHelloFieldNumber;
const int DBHello::kB4FieldNumber;
const int DBHello::kBytesmsgFieldNumber;
const int DBHello::kRepeatTestFieldNumber;
const int DBHello::kRepeatMsgFieldNumber;
const int DBHello::kEvFieldNumber;
#endif  // !_MSC_VER

DBHello::DBHello()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DBHello)
}

void DBHello::InitAsDefaultInstance() {
  hello_ = const_cast< ::Hello*>(&::Hello::default_instance());
}

DBHello::DBHello(const DBHello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DBHello)
}

void DBHello::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pk1_ = GOOGLE_ULONGLONG(0);
  pk2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f1_ = 0u;
  f2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hello_ = NULL;
  b4_ = false;
  bytesmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBHello::~DBHello() {
  // @@protoc_insertion_point(destructor:DBHello)
  SharedDtor();
}

void DBHello::SharedDtor() {
  if (pk2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pk2_;
  }
  if (f2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f2_;
  }
  if (bytesmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bytesmsg_;
  }
  if (this != default_instance_) {
    delete hello_;
  }
}

void DBHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBHello_descriptor_;
}

const DBHello& DBHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

DBHello* DBHello::default_instance_ = NULL;

DBHello* DBHello::New() const {
  return new DBHello;
}

void DBHello::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBHello*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(f1_, b4_);
    pk1_ = GOOGLE_ULONGLONG(0);
    if (has_pk2()) {
      if (pk2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pk2_->clear();
      }
    }
    if (has_f2()) {
      if (f2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f2_->clear();
      }
    }
    if (has_hello()) {
      if (hello_ != NULL) hello_->::Hello::Clear();
    }
    if (has_bytesmsg()) {
      if (bytesmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bytesmsg_->clear();
      }
    }
  }
  ev_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  repeat_test_.Clear();
  repeat_msg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DBHello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 pk1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pk1_)));
          set_has_pk1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pk2;
        break;
      }

      // required string pk2 = 2;
      case 2: {
        if (tag == 18) {
         parse_pk2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pk2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pk2().data(), this->pk2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pk2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_f1;
        break;
      }

      // optional uint32 f1 = 3;
      case 3: {
        if (tag == 24) {
         parse_f1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &f1_)));
          set_has_f1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f2;
        break;
      }

      // optional string f2 = 4;
      case 4: {
        if (tag == 34) {
         parse_f2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f2().data(), this->f2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hello;
        break;
      }

      // optional .Hello hello = 5;
      case 5: {
        if (tag == 42) {
         parse_hello:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hello()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_b4;
        break;
      }

      // optional bool b4 = 6;
      case 6: {
        if (tag == 48) {
         parse_b4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b4_)));
          set_has_b4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_bytesmsg;
        break;
      }

      // optional bytes bytesmsg = 7;
      case 7: {
        if (tag == 58) {
         parse_bytesmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytesmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_repeat_test;
        break;
      }

      // repeated uint32 repeat_test = 8;
      case 8: {
        if (tag == 64) {
         parse_repeat_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_repeat_test())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_repeat_test())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_repeat_test;
        if (input->ExpectTag(74)) goto parse_repeat_msg;
        break;
      }

      // repeated .Award repeat_msg = 9;
      case 9: {
        if (tag == 74) {
         parse_repeat_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_repeat_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_repeat_msg;
        if (input->ExpectTag(80)) goto parse_ev;
        break;
      }

      // optional .EnumDef_value ev = 10;
      case 10: {
        if (tag == 80) {
         parse_ev:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EnumDef_value_IsValid(value)) {
            set_ev(static_cast< ::EnumDef_value >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DBHello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DBHello)
  return false;
#undef DO_
}

void DBHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DBHello)
  // required uint64 pk1 = 1;
  if (has_pk1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pk1(), output);
  }

  // required string pk2 = 2;
  if (has_pk2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pk2().data(), this->pk2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pk2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pk2(), output);
  }

  // optional uint32 f1 = 3;
  if (has_f1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->f1(), output);
  }

  // optional string f2 = 4;
  if (has_f2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f2().data(), this->f2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f2(), output);
  }

  // optional .Hello hello = 5;
  if (has_hello()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hello(), output);
  }

  // optional bool b4 = 6;
  if (has_b4()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->b4(), output);
  }

  // optional bytes bytesmsg = 7;
  if (has_bytesmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->bytesmsg(), output);
  }

  // repeated uint32 repeat_test = 8;
  for (int i = 0; i < this->repeat_test_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->repeat_test(i), output);
  }

  // repeated .Award repeat_msg = 9;
  for (int i = 0; i < this->repeat_msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->repeat_msg(i), output);
  }

  // optional .EnumDef_value ev = 10;
  if (has_ev()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->ev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DBHello)
}

::google::protobuf::uint8* DBHello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBHello)
  // required uint64 pk1 = 1;
  if (has_pk1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pk1(), target);
  }

  // required string pk2 = 2;
  if (has_pk2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pk2().data(), this->pk2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pk2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pk2(), target);
  }

  // optional uint32 f1 = 3;
  if (has_f1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->f1(), target);
  }

  // optional string f2 = 4;
  if (has_f2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f2().data(), this->f2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f2(), target);
  }

  // optional .Hello hello = 5;
  if (has_hello()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->hello(), target);
  }

  // optional bool b4 = 6;
  if (has_b4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->b4(), target);
  }

  // optional bytes bytesmsg = 7;
  if (has_bytesmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->bytesmsg(), target);
  }

  // repeated uint32 repeat_test = 8;
  for (int i = 0; i < this->repeat_test_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->repeat_test(i), target);
  }

  // repeated .Award repeat_msg = 9;
  for (int i = 0; i < this->repeat_msg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->repeat_msg(i), target);
  }

  // optional .EnumDef_value ev = 10;
  if (has_ev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->ev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBHello)
  return target;
}

int DBHello::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 pk1 = 1;
    if (has_pk1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pk1());
    }

    // required string pk2 = 2;
    if (has_pk2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pk2());
    }

    // optional uint32 f1 = 3;
    if (has_f1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->f1());
    }

    // optional string f2 = 4;
    if (has_f2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f2());
    }

    // optional .Hello hello = 5;
    if (has_hello()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hello());
    }

    // optional bool b4 = 6;
    if (has_b4()) {
      total_size += 1 + 1;
    }

    // optional bytes bytesmsg = 7;
    if (has_bytesmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytesmsg());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .EnumDef_value ev = 10;
    if (has_ev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ev());
    }

  }
  // repeated uint32 repeat_test = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->repeat_test_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->repeat_test(i));
    }
    total_size += 1 * this->repeat_test_size() + data_size;
  }

  // repeated .Award repeat_msg = 9;
  total_size += 1 * this->repeat_msg_size();
  for (int i = 0; i < this->repeat_msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->repeat_msg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBHello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBHello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBHello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBHello::MergeFrom(const DBHello& from) {
  GOOGLE_CHECK_NE(&from, this);
  repeat_test_.MergeFrom(from.repeat_test_);
  repeat_msg_.MergeFrom(from.repeat_msg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pk1()) {
      set_pk1(from.pk1());
    }
    if (from.has_pk2()) {
      set_pk2(from.pk2());
    }
    if (from.has_f1()) {
      set_f1(from.f1());
    }
    if (from.has_f2()) {
      set_f2(from.f2());
    }
    if (from.has_hello()) {
      mutable_hello()->::Hello::MergeFrom(from.hello());
    }
    if (from.has_b4()) {
      set_b4(from.b4());
    }
    if (from.has_bytesmsg()) {
      set_bytesmsg(from.bytesmsg());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_ev()) {
      set_ev(from.ev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBHello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBHello::CopyFrom(const DBHello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBHello::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DBHello::Swap(DBHello* other) {
  if (other != this) {
    std::swap(pk1_, other->pk1_);
    std::swap(pk2_, other->pk2_);
    std::swap(f1_, other->f1_);
    std::swap(f2_, other->f2_);
    std::swap(hello_, other->hello_);
    std::swap(b4_, other->b4_);
    std::swap(bytesmsg_, other->bytesmsg_);
    repeat_test_.Swap(&other->repeat_test_);
    repeat_msg_.Swap(&other->repeat_msg_);
    std::swap(ev_, other->ev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBHello_descriptor_;
  metadata.reflection = DBHello_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
