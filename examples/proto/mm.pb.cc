// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mm {

namespace {

const ::google::protobuf::Descriptor* PK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PK_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hero_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ConstValueDef_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mm_2eproto() {
  protobuf_AddDesc_mm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mm.proto");
  GOOGLE_CHECK(file != NULL);
  PK_descriptor_ = file->message_type(0);
  static const int PK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PK, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PK, db_),
  };
  PK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PK_descriptor_,
      PK::default_instance_,
      PK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PK));
  Hero_descriptor_ = file->message_type(1);
  static const int Hero_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, pk_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, f32_),
  };
  Hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hero_descriptor_,
      Hero::default_instance_,
      Hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hero));
  ConstValueDef_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PK_descriptor_, &PK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hero_descriptor_, &Hero::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mm_2eproto() {
  delete PK::default_instance_;
  delete PK_reflection_;
  delete Hero::default_instance_;
  delete Hero_reflection_;
}

void protobuf_AddDesc_mm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_extensions_2eproto();
  ::protobuf_AddDesc_comm_2eproto();
  ::db::protobuf_AddDesc_db_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010mm.proto\022\002mm\032\020extensions.proto\032\ncomm.p"
    "roto\032\010db.proto\"0\n\002PK\022\n\n\002id\030\001 \002(\005\022\026\n\002db\030\002"
    " \001(\0132\n.db.DBTest:\006\202\265\030\002id\"\221\001\n\004Hero\022\n\n\002id\030"
    "\004 \002(\005\022\027\n\004base\030\001 \002(\0132\t.CommBase\022\027\n\007id_lis"
    "t\030\002 \003(\005B\006\222\265\030\00232\022)\n\007pk_list\030\003 \003(\0132\006.mm.PK"
    "B\020\222\265\030\014MAX_PK_COUNT\022\023\n\003str\030\005 \002(\tB\006\232\265\030\00232\022"
    "\013\n\003f32\030\006 \001(\002*!\n\rConstValueDef\022\020\n\014MAX_PK_"
    "COUNT\020\036", 287);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mm.proto", &protobuf_RegisterTypes);
  PK::default_instance_ = new PK();
  Hero::default_instance_ = new Hero();
  PK::default_instance_->InitAsDefaultInstance();
  Hero::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mm_2eproto {
  StaticDescriptorInitializer_mm_2eproto() {
    protobuf_AddDesc_mm_2eproto();
  }
} static_descriptor_initializer_mm_2eproto_;
const ::google::protobuf::EnumDescriptor* ConstValueDef_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConstValueDef_descriptor_;
}
bool ConstValueDef_IsValid(int value) {
  switch(value) {
    case 30:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PK::kIdFieldNumber;
const int PK::kDbFieldNumber;
#endif  // !_MSC_VER

PK::PK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mm.PK)
}

void PK::InitAsDefaultInstance() {
  db_ = const_cast< ::db::DBTest*>(&::db::DBTest::default_instance());
}

PK::PK(const PK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mm.PK)
}

void PK::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  db_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PK::~PK() {
  // @@protoc_insertion_point(destructor:mm.PK)
  SharedDtor();
}

void PK::SharedDtor() {
  if (this != default_instance_) {
    delete db_;
  }
}

void PK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PK_descriptor_;
}

const PK& PK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mm_2eproto();
  return *default_instance_;
}

PK* PK::default_instance_ = NULL;

PK* PK::New() const {
  return new PK;
}

void PK::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_db()) {
      if (db_ != NULL) db_->::db::DBTest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mm.PK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db;
        break;
      }

      // optional .db.DBTest db = 2;
      case 2: {
        if (tag == 18) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mm.PK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mm.PK)
  return false;
#undef DO_
}

void PK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mm.PK)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .db.DBTest db = 2;
  if (has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->db(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mm.PK)
}

::google::protobuf::uint8* PK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mm.PK)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .db.DBTest db = 2;
  if (has_db()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->db(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mm.PK)
  return target;
}

int PK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .db.DBTest db = 2;
    if (has_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PK::MergeFrom(const PK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_db()) {
      mutable_db()->::db::DBTest::MergeFrom(from.db());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PK::CopyFrom(const PK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_db()) {
    if (!this->db().IsInitialized()) return false;
  }
  return true;
}

void PK::Swap(PK* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(db_, other->db_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PK_descriptor_;
  metadata.reflection = PK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Hero::kIdFieldNumber;
const int Hero::kBaseFieldNumber;
const int Hero::kIdListFieldNumber;
const int Hero::kPkListFieldNumber;
const int Hero::kStrFieldNumber;
const int Hero::kF32FieldNumber;
#endif  // !_MSC_VER

Hero::Hero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mm.Hero)
}

void Hero::InitAsDefaultInstance() {
  base_ = const_cast< ::CommBase*>(&::CommBase::default_instance());
}

Hero::Hero(const Hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mm.Hero)
}

void Hero::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  base_ = NULL;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f32_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hero::~Hero() {
  // @@protoc_insertion_point(destructor:mm.Hero)
  SharedDtor();
}

void Hero::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (this != default_instance_) {
    delete base_;
  }
}

void Hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hero_descriptor_;
}

const Hero& Hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mm_2eproto();
  return *default_instance_;
}

Hero* Hero::default_instance_ = NULL;

Hero* Hero::New() const {
  return new Hero;
}

void Hero::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Hero*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 51) {
    ZR_(id_, f32_);
    if (has_base()) {
      if (base_ != NULL) base_->::CommBase::Clear();
    }
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  id_list_.Clear();
  pk_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mm.Hero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CommBase base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id_list;
        break;
      }

      // repeated int32 id_list = 2;
      case 2: {
        if (tag == 16) {
         parse_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_id_list())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id_list;
        if (input->ExpectTag(26)) goto parse_pk_list;
        break;
      }

      // repeated .mm.PK pk_list = 3;
      case 3: {
        if (tag == 26) {
         parse_pk_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pk_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pk_list;
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // required int32 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_str;
        break;
      }

      // required string str = 5;
      case 5: {
        if (tag == 42) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_f32;
        break;
      }

      // optional float f32 = 6;
      case 6: {
        if (tag == 53) {
         parse_f32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f32_)));
          set_has_f32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mm.Hero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mm.Hero)
  return false;
#undef DO_
}

void Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mm.Hero)
  // required .CommBase base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // repeated int32 id_list = 2;
  for (int i = 0; i < this->id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->id_list(i), output);
  }

  // repeated .mm.PK pk_list = 3;
  for (int i = 0; i < this->pk_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pk_list(i), output);
  }

  // required int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  // required string str = 5;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->str(), output);
  }

  // optional float f32 = 6;
  if (has_f32()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->f32(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mm.Hero)
}

::google::protobuf::uint8* Hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mm.Hero)
  // required .CommBase base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // repeated int32 id_list = 2;
  for (int i = 0; i < this->id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->id_list(i), target);
  }

  // repeated .mm.PK pk_list = 3;
  for (int i = 0; i < this->pk_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pk_list(i), target);
  }

  // required int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  // required string str = 5;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->str(), target);
  }

  // optional float f32 = 6;
  if (has_f32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->f32(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mm.Hero)
  return target;
}

int Hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .CommBase base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // required string str = 5;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // optional float f32 = 6;
    if (has_f32()) {
      total_size += 1 + 4;
    }

  }
  // repeated int32 id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id_list(i));
    }
    total_size += 1 * this->id_list_size() + data_size;
  }

  // repeated .mm.PK pk_list = 3;
  total_size += 1 * this->pk_list_size();
  for (int i = 0; i < this->pk_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pk_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hero::MergeFrom(const Hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_list_.MergeFrom(from.id_list_);
  pk_list_.MergeFrom(from.pk_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_base()) {
      mutable_base()->::CommBase::MergeFrom(from.base());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_f32()) {
      set_f32(from.f32());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hero::CopyFrom(const Hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->pk_list())) return false;
  return true;
}

void Hero::Swap(Hero* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(base_, other->base_);
    id_list_.Swap(&other->id_list_);
    pk_list_.Swap(&other->pk_list_);
    std::swap(str_, other->str_);
    std::swap(f32_, other->f32_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hero_descriptor_;
  metadata.reflection = Hero_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mm

// @@protoc_insertion_point(global_scope)
