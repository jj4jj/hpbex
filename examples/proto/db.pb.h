// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#ifndef PROTOBUF_db_2eproto__INCLUDED
#define PROTOBUF_db_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "extensions.pb.h"
#include "comm.pb.h"
// @@protoc_insertion_point(includes)

namespace db {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_db_2eproto();
void protobuf_AssignDesc_db_2eproto();
void protobuf_ShutdownFile_db_2eproto();

class DBTest;

// ===================================================================

class DBTest : public ::google::protobuf::Message {
 public:
  DBTest();
  virtual ~DBTest();

  DBTest(const DBTest& from);

  inline DBTest& operator=(const DBTest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBTest& default_instance();

  void Swap(DBTest* other);

  // implements Message ----------------------------------------------

  DBTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBTest& from);
  void MergeFrom(const DBTest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint32 seq = 2;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 2;
  inline ::google::protobuf::uint32 seq() const;
  inline void set_seq(::google::protobuf::uint32 value);

  // optional .CommBase base = 3;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 3;
  inline const ::CommBase& base() const;
  inline ::CommBase* mutable_base();
  inline ::CommBase* release_base();
  inline void set_allocated_base(::CommBase* base);

  // @@protoc_insertion_point(class_scope:db.DBTest)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_base();
  inline void clear_has_base();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 role_id_;
  ::CommBase* base_;
  ::google::protobuf::uint32 seq_;
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();

  void InitAsDefaultInstance();
  static DBTest* default_instance_;
};
// ===================================================================


// ===================================================================

// DBTest

// required uint64 role_id = 1;
inline bool DBTest::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBTest::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBTest::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBTest::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 DBTest::role_id() const {
  // @@protoc_insertion_point(field_get:db.DBTest.role_id)
  return role_id_;
}
inline void DBTest::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
  // @@protoc_insertion_point(field_set:db.DBTest.role_id)
}

// optional uint32 seq = 2;
inline bool DBTest::has_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBTest::set_has_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBTest::clear_has_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBTest::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 DBTest::seq() const {
  // @@protoc_insertion_point(field_get:db.DBTest.seq)
  return seq_;
}
inline void DBTest::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:db.DBTest.seq)
}

// optional .CommBase base = 3;
inline bool DBTest::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBTest::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBTest::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBTest::clear_base() {
  if (base_ != NULL) base_->::CommBase::Clear();
  clear_has_base();
}
inline const ::CommBase& DBTest::base() const {
  // @@protoc_insertion_point(field_get:db.DBTest.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::CommBase* DBTest::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::CommBase;
  // @@protoc_insertion_point(field_mutable:db.DBTest.base)
  return base_;
}
inline ::CommBase* DBTest::release_base() {
  clear_has_base();
  ::CommBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline void DBTest::set_allocated_base(::CommBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:db.DBTest.base)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace db

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db_2eproto__INCLUDED
